use module std::lib.io;

let swap(p1, p2) : *int -> void
    => (*p1, *p2) = (*p2, *p1);

let partition(arr[], low, high) : int -> int {
    let pivot = arr[high];
    
    for (i = (low - 1), j = low; j <= (high - 1); j++) {
        if (arr[j] < pivot)
            swap(&arr[++i], &arr[j]);
    }

    return swap(&arr[i + 1], &arr[high]), (i + 1);
}

let quicksort(arr[], low, high) : int -> void {
    if (low < high) {
        pi = partition(arr, low, high);

        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

let main() -> int {
    arr[] = [ 10, 7, 8, 9, 1, 5 ], n = sizeof arr / sizeof arr[0];

    quicksort(arr, 0, n - 1);

    printfn("Sorted Array:");

    for (x :: arr)
        printfn("{0}", arr[i]);

    return 0;
}