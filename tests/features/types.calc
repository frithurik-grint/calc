// This file is a template for a future feature.
//
// The idea is to try to implement all this type
// declarations, or (at least) to inspire future
// programming languages features.
//
// The concept at the base of everyone of this types
// is that everything is a byte or a set of bytes. So
// everything is a number and every number can be combined
// and organized in memory as the programmer needs.
//
// The type system that manages this features works at
// compile-time (so during the parsing).
//
// I divided type declarations in 3 groups: data types,
// strucured types and, finally, referenced types.
//
// ------------------------------------------------------+

// Data Types
//
// In calc numeric primitive types can depend on the
// implementation, beacuse it hasn't a primitivie types
// set, but they can be declared by the compiler or with
// the type declaration syntax:
//
type_name <- (signed|unsigned) int :: bit_size;
type_name <- (signed|unsigned) int :: bit_size, byte_alignment;

// e.g.
  i32 <- signed int :: 32, 4; // this is declaration of a fixed
                              // width signed integer type

type_name <- real :: (half, single, double, quadruple, octuple, ...); // obviously the target machine
                                                                      // must support the precision
// e.g.
  f32 <- real :: single; // this is declaration of a single precision
                         // floating-point type (C's float)

// Some implementations may load a 'types.calc' module on setup
// that defines the primitives used by that implementation.
//
// int and real type specifiers can be used as data types, beacuse
// they represents concepts of (respectively) system's default int
// type, and system's default float type. Usually they corresponds
// to int and double C types.
//
// Maybe in future standards will be necessary to define a standard
// primitives set.
//

// Alias Types:
//
// This declaration only defines a symbolic alias of one type, it can
// be useful sometimes. (like does typedef in C)
//
type_name <- type;

// Subrange Types:
//
// This declaration defines a type with range limitations.
//
type_name <- [min..max] : type;

// Enumeration Types:
//
// This declaration defines a type that enumerates a set of const
// fields, is also possible give them a specific value (or let the
// compiler give them one, incrementing the previous field value).
//
// The concept behind enumeration types is to give a specific label
// to a specific numeric value. But I'd like to add support for typed
// enumerations, everything is number so it could be possible.
//
type_name <- enum {
  ITEM_1, // = 0
  ITEM_2, // = 1
  .
  .
  .
  ITEM_N, // = N
//      ^------------- the tailing comma is accepted but not required
};

type_name <- enum {
  ITEM_1 = 1,
  ITEM_2 = 32,
  .
  .
  .
  ITEM_N = 3,
};

type_name <- enum : i32 {
//                  ^^^-------- each member of the enum becomes an i32
//                              EVERYTHING can be enumerated, also complex
//                              types.
  ITEM_1 = 1,
  ITEM_2 = 32,
  .
  .
  .
  ITEM_N = 3,
};

// Pointer Types:
//
// This defines an alias to a pointer type.
//
type_name <- *type;

// Array Types:
//
// This defines an alias to an array type. The uncommon thing
// (inspired by Ada programming language) is the possibility to
// choose which is the firt index, the default remains 0.
//
type_name <- type[max];
type_name <- type[min..max]; // min is the first index, default is 0

// Multi-Dimensional Array Types:
//
// This defines a multi dimensional array.
//
type_name <- type[dim1_max, dim2_max, ... dimN_max];
type_name <- type[dim1_min..dim1_max, dim2_min..dim2_max, ... dimN_min..dimN_max];
//
// ------------------------------------------------------+

// Structured Types
//
// Tuple Types:
//
// This defines a structured type with N members, optimized to be
// fast to load and access to its members. It cannot inherit or be
// inherited, can't have properties and methods, and it can't have
// an internal scope for information hiding. It's like a struct, the
// only difference is that variables of this type can be assigned,
// copied and initialized in full. They can also be constructed,
// deconstructed and destructed.
//
// Each member can have a name, if not specified the name assigned to
// them is their index. (influenced by Rust)
//
// When it has 2 members it is a pair, with 3 a vector
//
type_name <- (type1, type2, ..., typeN);
type_name <- (member1_name : type1, member2_name : type2, ..., memberN_name : typeN);

// e.g.
  point <- (x : f64, y : f64);

  A, B, C : point;

  A(2, 4);    // call-like initialization
  B = (4, 2); // common initialization
  C = {
    .x = 3,
    .x = 4
  };           // ERROR this is a structure initialization

// Structure Types:
//
// Classical structure type, like C.
//
type_name <- struct {
  item1 : type1;
  item2 : type2;
  .
  .
  .
  itemN : typeN;
};

type_name <- struct : i32 {
//                    ^^^-------- specifies alignment (a kind of alignas)
  item1 : type1;
  item2 : type2;
  .
  .
  .
  itemN : typeN;
};

//
// ------------------------------------------------------+

// Reference Types
//
// Referenced Types:
//
// Reference types works like pointers, but implicitly.
// (personally, I don't like the idea to add those types
// but they're useful, so I will do...)
//
type_name <- &type;

// Function Types:
//
// This declares types of function variables. There are three
// sub-types of function types: pure functions (those functions
// which accept some variable of a single type and maps it to
// another type), functions and variadic functions (with a variable
// number of arguments, specified with '...').
//
type_name <- params_type -> return_type;
type_name <- (params) : params_type -> return_type;

type_name <- (param1_type, param2_type, ..., paramN_type) -> return_type;
type_name <- (param1 : param1_type, param2 : param2_type, ..., paramN : paramN_type) -> return_type;

type_name <- (...) -> return_type;
type_name <- (...va_param) : va_type -> return_type;
type_name <- (param : param_type, ...) -> return_type;
type_name <- (param : param_type, ...va_param : va_type) -> return_type;

// Functional Types:
//
// This defines a type which format corresponds to function return value
// and the value that be assigned to the signature of the function.
//
// This is inspired by Ada: 'type hour_type is mod 24;'.
//
type_name <- func;
// e.g.
  hour_t <- (h) : int -> int = h % 24;  // the body, defines the value given to
                                        // a variable after an assignment.
  h : hour_t = 5;
//           ^^^-------------------------- is the same as h : int = 5 % 24;
//                                         the difference is that the function is
//                                         called on every assignment.

// Object Types:
//
// This defines a type that follows OOP principles: inheritance, encapsulation and
// polymorphism.
//
// 1. Objects can inherit and be inherited by other objects, object cannot inherit any
// other data type kind.
//
// 2. Objects encapsulate members and they can change their accessibility with access
// modifiers (public, private, protected). The default protection is private.
//
// 3. Objects are reference types so they can easily be converted between types with common
// bases (because the base layout is the same).
//
type_name <- object {
  .
  .
  .
};
//
// Objects supports fields, properties, methods and operators. They can be modelled as
// the programmer needs, they exists to create every sort of abstraction needed.
//
